// // Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by WSO2 Healthcare Team for implementing source system connections.
// Developers are allowed modify this file as per the requirement.

import wso2healthcare/healthcare.fhir.r4;
import wso2healthcare/healthcare.fhir.r4.aubase410;
import ballerina/http;

configurable string patient_source_url = ?;
configurable string client_id = ?;
configurable string client_secret = ?;
configurable string token_url = ?;

// OAuth2 client configuration
http:ClientAuthConfig authConfig = {
    tokenUrl: token_url,
    clientId: client_id,
    clientSecret: client_secret,
    scopes: [],
    clientConfig: {
    }
};

final http:Client patientBE = check new (patient_source_url, auth = authConfig);

public isolated class InternationalPatientSourceConnect {

    *PatientSourceConnect;
    isolated function profile() returns r4:uri {
        return "http://hl7.org.au/fhir/StructureDefinition/au-patient";
    }

    isolated function read(string id, r4:FHIRContext ctx) returns Patient|r4:FHIRError {

        http:Response|http:ClientError response = patientBE->get("/patients/mypractice/" + id);
        if response is http:Response {
            if response.statusCode == http:STATUS_OK {
                json|error payload = response.getJsonPayload();
                if payload is json {
                    do {
                        if payload == {} {
                            return r4:createFHIRError("Requested patient not found.", r4:ERROR, r4:PROCESSING_NOT_FOUND,
                                httpStatusCode = http:STATUS_OK);
                        }
                        //parsing json payload to CustomPatient structure
                        CustomPatient customPatient = check payload.cloneWithType(CustomPatient);
                        //mapping CustomPatient to AUBasePatient
                        return customPatientToFHIR(customPatient);
                    } on fail var e {
                        return r4:createInternalFHIRError("Error occurred creating FHIR patient resource.", r4:ERROR,
                                r4:TRANSIENT_EXCEPTION, cause = e);
                    }
                } else {
                    return r4:createInternalFHIRError("Error occurred while extracting json payload.", r4:ERROR, r4:TRANSIENT_EXCEPTION);
                }
            } else {
                return r4:createInternalFHIRError("Error occurred while fetching data.", r4:ERROR, r4:TRANSIENT_EXCEPTION);
            }
        } else {
            return r4:createInternalFHIRError("Error occurred while fetching data.", r4:ERROR, r4:TRANSIENT_EXCEPTION);
        }
    }

    isolated function search(map<r4:RequestSearchParameter[]> searchParameters, r4:FHIRContext ctx) returns r4:Bundle|Patient[]|r4:FHIRError {

        aubase410:AUBasePatient[] patients = [];

        http:Response|http:ClientError response = patientBE->get("/patients/main");
        if response is http:Response {
            if response.statusCode == http:STATUS_OK {
                json|error payloadArr = response.getJsonPayload();
                if payloadArr is json[] {
                    do {
                        foreach json payload in payloadArr {
                            //parsing json payload to CustomPatient structure
                            CustomPatient customPatient = check payload.cloneWithType(CustomPatient);
                            //mapping CustomPatient to AUBasePatient
                            aubase410:AUBasePatient patient = customPatientToFHIR(customPatient);
                            patients.push(patient);
                        }

                    } on fail var e {
                        return r4:createInternalFHIRError("Error occurred creating FHIR patient resource.", r4:ERROR,
                                r4:TRANSIENT_EXCEPTION, cause = e);
                    }
                } else {
                    return r4:createInternalFHIRError("Error occurred while extracting json payload.", r4:ERROR, r4:TRANSIENT_EXCEPTION);
                }
            } else {
                return r4:createInternalFHIRError("Error occurred while fetching data.", r4:ERROR, r4:TRANSIENT_EXCEPTION);
            }
        } else {
            return r4:createInternalFHIRError("Error occurred while fetching data.", r4:ERROR, r4:TRANSIENT_EXCEPTION);
        }
        return patients;
    }

    isolated function create(r4:FHIRResourceEntity patient, r4:FHIRContext ctx) returns string|r4:FHIRError {

        //Implement source system connection here and persist FHIR resource.
        //Must respond with ID in order to create Location header

        return r4:createFHIRError("Not implemented.", r4:ERROR, r4:PROCESSING_NOT_SUPPORTED, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

}

